
##Practical Styling
翻译与总结

翻译

在这段视频中，讲解了如何将 CSS 样式规则从外部文件（index.css）转移到组件中作为内部样式。以下是具体步骤和要点：

	1.	三种添加样式的方式：
	•	内联样式（inline）： 在 HTML 元素中使用 style 属性直接添加样式。
	•	内部样式（internal）： 在 HTML 的 <head> 部分用 <style> 标签定义样式。
	•	外部样式（external）： 使用 <link> 标签链接外部 CSS 文件。
	2.	从外部 CSS 转为内部样式的过程：
	•	原本的组件通过外部样式表（index.css）进行样式化。
	•	作者将组件的部分样式（比如 sidebar 的样式）从 index.css 文件中剪切出来（Ctrl+X 或 Command+X），然后粘贴到组件文件（如 sidebar.js）中。
	3.	将 CSS 转换为 JavaScript 对象：
	•	声明变量： 用 const 声明一个变量（如 asideStyle）。
	•	修改语法：
	•	将分号（;）替换为逗号（,）。
	•	将 CSS 属性名从连字符命名（如 background-color）改为驼峰命名法（如 backgroundColor）。
	•	将属性值转为字符串： 用双引号将 CSS 值包裹起来（如 background: "blue"）。
	4.	在组件中使用样式对象：
	•	在 return 语句中的 aside 标签里，添加 style 属性：

<aside style={asideStyle}></aside>


	•	保存文件后，组件在浏览器中恢复到之前的样式效果。

总结重点

	1.	样式定义方式：
	•	可以通过内联样式、内部样式、外部样式来为组件添加样式。
	•	内联样式直接在组件中写入样式代码，更适合局部或动态样式需求。
	2.	将外部样式转为内部样式的步骤：
	•	从外部 CSS 文件剪切所需样式。
	•	将样式粘贴到组件文件中，转换为 JavaScript 对象。
	•	修改语法（逗号代替分号、驼峰命名法、值用双引号包裹）。
	3.	代码示例：

const asideStyle = {
    backgroundColor: "blue",
    fontSize: "16px",
    padding: "10px"
};

function Sidebar() {
    return (
        <aside style={asideStyle}>
            This is the sidebar.
        </aside>
    );
}


	4.	优缺点：
	•	优点： 样式更局部化，便于动态调整。
	•	缺点： 不利于代码复用，样式维护相对复杂。

通过这种方法，可以将组件的样式封装到组件内，增强其自包含性，同时支持灵活的动态样式修改。




